
;; DEFINICIÓN DE LA RED
def create_model_simple_cnn():
  model = models.Sequential()
  #CAPA DE ENTRADA
  model.add(layers.BatchNormalization(input_shape=(32, 32, 3)))
  
  
  #Capa de convolución
  model.add(layers.Conv2D(32, (3, 3), activation='relu',padding='same'))
  model.add(layers.MaxPooling2D((2, 2)))

  model.add(layers.Conv2D(64, (3, 3), activation='relu',padding='same'))
  model.add(layers.MaxPooling2D((2, 2)))

  model.add(layers.Conv2D(128, (3, 3), activation='relu',padding='same'))
  model.add(layers.MaxPooling2D((2, 2)))


  model.add(layers.Dropout(0.25))  
  
  #Realiza el aplanado de las neuronas de la capa anterior
  model.add(layers.Flatten())
  #Añadimos una capa
  model.add(layers.Dense(32, activation='relu'))
 

  #CAPA SALIDA
  model.add(layers.Dense(10, activation='softmax'))
  return model


;; MODEL COMPILE
model = create_model_simple_cnn() 

model.compile(
      optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3, ),
      loss='sparse_categorical_crossentropy',
      metrics=['sparse_categorical_accuracy'])


;; MODEL FIT
historico = model.fit(train_images, train_labels, epochs=7, validation_freq=1,
                      validation_data=(test_images, test_labels))